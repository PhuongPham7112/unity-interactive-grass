// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// time updated var
float time;
float deltaTime;

// user-provided physical model params
float grassMass;
float stiffnessCoefficient;
float collisionDecreaseAmount;

// gravity
float gravityParam;
float4 gravityPoint;
float4 gravityDirection;

// buffers
int numColliders;
StructuredBuffer<float4> colliders;
StructuredBuffer<float4x4> modelMatrix;
RWStructuredBuffer<float> forceBuffer; // collision force data
RWStructuredBuffer<float4> v1Positions; // v1 buffer + original width
RWStructuredBuffer<float4> v2Positions; // v2 buffer + original length
RWStructuredBuffer<float3> groundPositions; // world ground position

float B(float2 v0, float2 v1, float2 v2, float t)
{
    float2 d = 2 * (1 - t) * (v1 - v0) + 2 * t * (v2 - v1);
    return sqrt(d.x * d.x + d.y * d.y);
}

// using legendre-gauss solution: https://pomax.github.io/bezierinfo/#arclength
float BezierCurveArcLength(float2 v0, float2 v1, float2 v2)
{
    float length = 0;
    int n = 3;
    // value tables: https://pomax.github.io/bezierinfo/legendre-gauss.html#n3
    float w[3] = { 0.8888888888888888f, 0.5555555555555556f, 0.5555555555555556f };
    float x[3] = { 0.0f, -0.7745966692414834f, 0.7745966692414834f };
    
    float t;
    for (int i = 0; i < n; i++)
    {
        t = 0.5f * x[i] + 0.5f;
        length += w[i] * B(v0, v1, v2, t);
    }
    return 0.5f * length;
}

float3 WindFunction(float3 pos)
{
    // Wind parameters
    float baseFrequency = 0.5;
    float baseAmplitude = 1.0;

    // Wind variation parameters
    float variation1 = sin(time * 0.1) * 0.2 + 0.8; // Slow variation in overall strength
    float variation2 = cos(time * 0.3) * 0.1 + 0.9; // Medium speed variation

    // Calculate displacement for each axis
    float x = sin(pos.x * baseFrequency + time) * baseAmplitude * variation1
        + cos(pos.z * baseFrequency * 2.0 + time * 1.2) * baseAmplitude * 0.5 * variation2;
    float y = cos(pos.y * baseFrequency * 0.5 + time * 0.9) * baseAmplitude * 0.3 * variation1
        + sin(pos.x * baseFrequency + time * 1.1) * baseAmplitude * 0.2 * variation2;
    float z = sin(pos.z * baseFrequency * 1.5 + time * 0.7) * baseAmplitude * 0.4 * variation1
        + cos(pos.y * baseFrequency * 2.5 + time * 1.3) * baseAmplitude * 0.3 * variation2;

    // Combine displacements into a 3D vector
    return float3(x, y, z);
}

float3 WindForce(float3 groundPos, float3 v0, float3 v2, float3 up, float h)
{
    float directAlignment = 1.0f - abs(dot(normalize(WindFunction(groundPos)), normalize(v2 - v0)));
    float heightRatio = dot((v2 - v0), up) / h;
    float alignmentValue = directAlignment * heightRatio;
    return WindFunction(groundPos) * alignmentValue * 0.25f;
}

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: make sure blade v2 is not underground
    float3 vertex0 = float3(0, 0, 0);
    float3 vertex1 = v1Positions[id.x].xyz;
    float3 vertex2 = v2Positions[id.x].xyz;

    float originalLength = v1Positions[id.x].w;
    float invOriginalLength = 1.0f / originalLength;
    float originalWidth = v2Positions[id.x].w;
    float3 idleV2 = float3(0, originalLength, 0);

    //direction of the blade of grass
    float3 up = float3(0, 1, 0);
    float3 right = float3(1, 0, 0);
    float3 groundPos = mul(modelMatrix[id.x], float4(vertex0, 1.0f)).xyz;
    
    // collision force
    int isCollided = 0;
    {
        float3 d = float3(0, 0, 0);
        for (int i = 0; i < numColliders; i++)
        {
            float3 colliderPos = colliders[i].xyz;
            float colliderRadius = colliders[i].w;
            float dist = distance(groundPos, colliderPos) - colliderRadius;
            if (dist > 0.01f && dist < originalLength)
            {
                // TODO: convert to world space correctly
                float3 v1PositionsWorld = mul(modelMatrix[id.x], float4(vertex1, 1.0f)).xyz;
                float3 v2PositionsWorld = mul(modelMatrix[id.x], float4(vertex2, 1.0f)).xyz;
                float3 midCurvePoint = 0.25f * groundPos + 0.5f * v1PositionsWorld + 0.25f * v2PositionsWorld;
        
                // Case 1: v2 in sphere => move v2 to the nearest border
                float distV2 = length(colliderPos - v2PositionsWorld) - colliderRadius;
                if (distV2 < 0.0f)
                {
                    isCollided = 1;
                    float3 force = distV2 * (colliderPos - v2PositionsWorld) / (distV2 + colliderRadius);
                    forceBuffer[id.x] += dot(force, force);
                    d += force;
                }
    
                // Case 2: curve in sphere
                float distMid = length(colliderPos - midCurvePoint) - colliderRadius;
                if (distMid < 0.0f)
                {
                    isCollided = 1;
                    float3 force = distMid * (colliderPos - midCurvePoint) / (distMid + colliderRadius);
                    forceBuffer[id.x] += dot(force, force);
                    d += force;
                }
            }
        }
        vertex2 += d;
    }

    // natural forces
    {
        // wind force: computed by using analytic functions
        float3 w = WindForce(groundPos, vertex0, vertex2, up, originalLength);
        
        // gravity force
        float3 front = normalize(cross(right, vertex2 - vertex0));
        float3 g_e = grassMass * (gravityDirection.xyz * gravityDirection.w * (1.0f - gravityParam)
        + normalize(gravityPoint.xyz - vertex2) * gravityPoint.w * gravityParam); // environmental gravity
        float3 g_f = 0.25f * length(g_e) * front; // front gravity
        float3 g = (g_f + g_e) * stiffnessCoefficient;
        
        // stiffness force: the counterforce to previously applied forces
        float collisionStrength = forceBuffer[id.x];
        collisionStrength = max(0.0f, collisionStrength - collisionDecreaseAmount * deltaTime);
        forceBuffer[id.x] = collisionStrength;
        float3 s = (idleV2 - vertex2) * (1.0f - 0.25f * stiffnessCoefficient) * max(1 - collisionStrength, 0.1f);
        
        // v2 translation
        vertex2 += (s + w + g) * deltaTime;
    }
    
    // correct blade length
    {
        // make sure v2 is above ground
        vertex2 = vertex2 - up * min(0.0f, dot(up, vertex2 - vertex0));

        // calculate length
        float currLength = BezierCurveArcLength(vertex0.xy, v1Positions[id.x].xy, v2Positions[id.x].xy);
        float lengthDiff = originalLength / currLength;
        
        // calculate v1 based on v2
        float lengthV0V2 = length(vertex2 - vertex0 - up * dot(vertex2 - vertex0, up)); // projected length
        vertex1  = vertex0 + originalLength * up * max(1 - lengthV0V2 * invOriginalLength, 0.05f * max(1.0f, lengthV0V2 * invOriginalLength));
        
        // correct new length
        float3 v01 = lengthDiff * (vertex1 - vertex0);
        float3 v12 = lengthDiff * (vertex2 - vertex1);
        vertex1 = v01;
        vertex2 = vertex1 + v12;
    }


    // output
    v1Positions[id.x] = float4(vertex1, originalLength);
    v2Positions[id.x] = float4(vertex2, originalWidth);
}
